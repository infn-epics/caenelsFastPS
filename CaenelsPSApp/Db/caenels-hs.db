
record(event, "$(P)$(R):readbackevent")
{
  field(SCAN, "1 second")
  field(VAL,  "$(P)$(R)readbackscan")
  field(PINI, "YES")
}
record (ai, "$(P)$(R)Range")
{
    field(DESC, "Range")

    field(PINI,  "YES")
    field(VAL,$(RANGE=30))
    field(FLNK, "$(P)$(R)CalcFanout")
}
record(fanout, "$(P)$(R)CalcFanout")
{
    field(LNK1, "$(P)$(R)LimitMinI_")
    field(LNK2, "$(P)$(R)LimitMinOutputI_")
    field(LNK3, "$(P)$(R)LimitMaxI_")
    field(LNK4, "$(P)$(R)LimitMaxOutputCurrent_")
}




record (stringin, "$(P)$(R)Model")
{
    field(DESC, "Model")
    field(DTYP, "stream")
    field(INP,  "@caenels-hs.proto getModel $(PORT)")
    field(PINI, "YES")
    field(FLNK, "$(P)$(R)Version")
}

record (stringin, "$(P)$(R)Version")
{
    field(DESC, "Version")
    field(DTYP, "stream")
    field(INP,  "@caenels-hs.proto getVersion $(PORT)")
    # field(FLNK, "$(P)$(R)_EnableInit")
}

#### Readback chain

record(ai, "$(P)$(R)OutputVoltage")
{
    field(DESC, "Output voltage")
    field(DTYP, "stream")
    field(EGU,  "V")
    field(FLNK, "$(P)$(R)OutputCurrent")
    field(INP,  "@caenels-hs.proto getOutputVoltage $(PORT)")
    field(PREC, "5")
    field(SCAN, "Event")

    field(EVNT, "$(P)$(R)readbackscan")

}
record(ai, "$(P)$(R)OutputCurrent")
{
    field(DESC, "Output current")
    field(DTYP, "stream")
    field(EGU,  "A")
    field(FLNK, "$(P)$(R)GroundCurrent")
    field(INP,  "@caenels-hs.proto getOutputCurrent $(PORT)")
    field(PREC, "5")

}



record(ai, "$(P)$(R)GroundCurrent")
{
    field(DESC, "Ground current")
    field(DTYP, "stream")
    field(EGU,  "A")
    field(FLNK, "$(P)$(R)DCLinkVoltage")
    field(INP,  "@caenels-hs.proto getGroundCurrent $(PORT)")
    field(PREC, "3")

}

record(ai, "$(P)$(R)DCLinkVoltage")
{
    field(DESC, "DC Link voltage")
    field(DTYP, "stream")
    field(EGU,  "V")
    field(FLNK, "$(P)$(R)HeatsinkTemp")
    field(INP,  "@caenels-hs.proto getDCLinkVoltage $(PORT)")
    field(PREC, "2")
}

record(ai, "$(P)$(R)HeatsinkTemp")
{
    field(DESC, "Heatsink temperature")
    field(DTYP, "stream")
    field(EGU,  "deg C")
    field(FLNK, "$(P)$(R)StatusMSB")
    field(INP,  "@caenels-hs.proto getTemperature $(PORT)")
    field(PREC, "2")
}

record(mbbiDirect, "$(P)$(R)StatusMSB")
{
    field(DESC, "Status MSB")
    field(DTYP, "stream")
    field(FLNK, "$(P)$(R)StatusLSB")
    field(INP,  "@caenels-hs.proto getStatusMSB $(PORT)")
}

record(mbbiDirect, "$(P)$(R)StatusLSB")
{
    field(DESC, "Status LSB")
    field(DTYP, "stream")
    field(INP,  "@caenels-hs.proto getStatusLSB $(PORT)")
}
######### SET POINTS

record(ao, "$(P)$(R)Current")
{
    field(DESC, "Current control (in V reg mode)")
    field(DTYP, "stream")
    field(EGU,  "A")
    field(OUT,  "@caenels-hs.proto setCurrent($(P)$(R)) $(PORT)")
    field(PREC, "5")

}

record(bo, "$(P)$(R)StatusReset")
{
    field(DESC, "Reset status register/clear faults")
    field(DTYP, "stream")
    field(OUT,  "@caenels-hs.proto resetStatus $(PORT)")
}

record(bo, "$(P)$(R)RampEnable")
{
    field(DESC, "Enables/disables ramping to setpoint")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(DOL,  "0")
    field(PINI, "YES")
}

record(bo, "$(P)$(R)BulkEnable")
{
    field(DESC, "Turn Bulk off/on")
    field(DTYP, "stream")
    field(OUT,  "@caenels-hs.proto setBulkEnable $(PORT)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    # the field gets initialized from status, clear UDF
    field(STAT, "NO_ALARM")
    field(SEVR, "NO_ALARM")
}

record(bo, "$(P)$(R)Enable")
{
    field(DESC, "Turn supply off/on")
    field(DTYP, "stream")
    field(OUT,  "@caenels-hs.proto setEnable $(PORT)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    # the field gets initialized from status, clear UDF
    field(STAT, "NO_ALARM")
    field(SEVR, "NO_ALARM")
}
#### CALC

record (calcout, "$(P)$(R)LimitMinI_")
{
    field(DESC, "Low limit for Current")
    field(INPA, "$(P)$(R)Range")
    field(CALC,  "-ABS(A)")
    field(OUT,  "$(P)$(R)Current.LOPR")
}
record (calcout, "$(P)$(R)LimitMinOutputI_")
{
    field(DESC, "Low limit for Current")
    field(INPA, "$(P)$(R)Range")
    field(CALC,  "-ABS(A)")
    field(OUT,  "$(P)$(R)OutputCurrent.LOPR")
}

record (calcout, "$(P)$(R)LimitMaxI_")
{
    field(DESC, "High limit for Current")
    field(INPA, "$(P)$(R)Range")
    field(CALC,  "ABS(A)")
    field(OUT,  "$(P)$(R)Current.HOPR")
}

record (calcout, "$(P)$(R)LimitMaxOutputCurrent_")
{
    field(DESC, "High limit for OutputCurrent")
    field(INPA, "$(P)$(R)Range")
    field(CALC,  "ABS(A)")
    field(OUT,  "$(P)$(R)OutputCurrent.HOPR")
}


# record(mbbiDirect, "$(P)$(R)_EnableInit")
# {
#     field(DESC, "Initialization for Enable")
#     field(DTYP, "stream")
#     field(PINI, "YES")
#     field(INP,  "@caenels-hs.proto getStatusLSB $(PORT)")
#     field(FLNK, "$(P)$(R)_EnableInitCalc")
# }

# record(calcout, "$(P)$(R)_EnableInitCalc")
# {
#     field(DESC, "Initialization for Enable")
#     field(INPA, "$(P)$(R)StatusLSB")
#     field(CALC, "A & 0x1")
#     field(OUT,  "$(P)$(R)Enable.VAL")
# }



